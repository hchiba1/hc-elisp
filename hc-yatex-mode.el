;yatex-mode-accel.el
;start by M-;
(add-hook 'yatex-mode-hook
      '(lambda()
	 (local-set-key [?\M-\;] 'yatex-mode-accel)
	 ))

(defun yatex-insert-statement (arg)
  "Insert a new line with string ARG."
  (interactive "sStatement: ")
  (beginning-of-line)
  (open-line 1)
;;   (indent-according-to-mode)
  (insert arg)
;;   (indent-according-to-mode)
  (next-line 1)
  (back-to-indentation)
  )


(defun yatex-mode-accel ()
  "Insert perl statemnts quickly by abbreviations."
  (interactive)
  (message "(d)ocument, (f)igure, (s)ection, s(u)bsection, su(b)subsection")
  (let ((c (read-char)))
    (cond
     ((equal c ?d)
      (yatex-insert-statement "\\documentclass[a4paper]{jarticle}")
      (yatex-insert-statement "\\usepackage[dvips]{graphicx}")
      (yatex-insert-statement "\\begin{document}")
      (yatex-insert-statement "")
      (yatex-insert-statement "\\end{document}")
      (previous-line 2)
      )
     ((equal c ?f)
      (yatex-insert-statement "\\begin{figure}[htbp]")
      (yatex-insert-statement "\\includegraphics[width=1.0\\linewidth]{.eps}")
      (yatex-insert-statement "\\caption{}")
      (yatex-insert-statement "\\end{figure}")
      (previous-line 2)(end-of-line)(backward-char 5)
      )
     ((equal c ?s)
      (yatex-insert-statement "\\section{}")
      (previous-line 1)(end-of-line)(backward-char 1)
      )
     ((equal c ?u)
      (yatex-insert-statement "\\subsection{}")
      (previous-line 1)(end-of-line)(backward-char 1)
      )
     ((equal c ?b)
      (yatex-insert-statement "\\subsubsection{}")
      (previous-line 1)(end-of-line)(backward-char 1)
      )
     ((char-equal c ?e)
      (yatex-insert-statement "\\begin{}")
      (yatex-insert-statement "")
      (yatex-insert-statement "\\end{}")
      (previous-line 3)(end-of-line)(backward-char 1)
      (let (i direc)
	(message "(c)enter, (e)quation, (i)temize")
	(setq direc (read-char))
	(cond
	 ((equal ?c direc)
	  (insert "center")(next-line 2)(end-of-line)(backward-char 1)(insert "center")(previous-line 1))
	 ((equal ?e direc)
	  (insert "equation")(next-line 2)(end-of-line)(backward-char 1)(insert "equation")(previous-line 1))
	 ((equal ?e direc)
	  (insert "itemize")(next-line 2)(end-of-line)(backward-char 1)(insert "itemize")(previous-line 1))
	 ))
      )
     ((char-equal c ?i)
      (let (branch startpos)
	(setq startpos (point))
	(yatex-insert-statement "if () {")
	(yatex-insert-statement "")
	(yatex-insert-statement "}")
	(while (progn
		 (message "els(i)f, (e)lse  or  other key")
		 (setq branch (read-char))
		 (char-equal branch ?i))
	  (yatex-insert-statement "elsif () {")
	  (yatex-insert-statement "")
	  (yatex-insert-statement "}")
	  )
	(cond
	 ((char-equal branch ?e)
	  (yatex-insert-statement "else {")
	  (yatex-insert-statement "")
	  (yatex-insert-statement "}")
	  )
	 )
	(goto-char startpos)(end-of-line)(backward-char 3)
	)
      )
     )))
